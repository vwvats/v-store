import Head from 'next/head'
import {
  ApolloClient,
  InMemoryCache,
  gql
} from '@apollo/client';

import Layout from '@components/Layout';
import Header from '@components/Header';
import Container from '@components/Container';
import Button from '@components/Button';

import styles from '@styles/Product.module.scss'

export default function Product({ product }) {
  return (
    <Layout>
      <Head>
        <title>Product Name</title>
        <meta name="description" content="Generated by create next app" />
      </Head>

      <Container>
        <div className={styles.productWrapper}>
          <div className={styles.productImage}>
            <img 
              src={product.image.url}
              alt="product image"
            />
          </div>
          <div className={styles.productContent}>
            <h1>{product.name}</h1>
            <div className={styles.productDescription}>
              <p>rand description</p>
            </div>
            <p className={styles.productPrice}>
              {product.price}
            </p>
            <p className={styles.productBuy}>
              <Button>
                Add to Cart
              </Button>
            </p>
          </div>
        </div>
      </Container>
    </Layout>
  )
}

export async function getStaticProps({ params }) {
  const client = new ApolloClient({
    uri: 'https://api-eu-central-1.graphcms.com/v2/cl2ni4nv32r1f01z4g0743xmd/master',
    cache: new InMemoryCache()
  })

  const data = await client.query({
    query: gql`
      query PageProduct($slug: String) {
        product(where: {slug: $slug}) {
          id
          name
          image
          price
        }
      }
    `,
    variables: {
      slug: params.productSlug
    }
  })

  const product = data.data.product; 

  return {
    props: { 
      product
    }
  }
}

export async function getStaticPaths() {
  const client = new ApolloClient({
    uri: 'https://api-eu-central-1.graphcms.com/v2/cl2ni4nv32r1f01z4g0743xmd/master',
    cache: new InMemoryCache()
  })

  const data = await client.query({
    query: gql`
      query PageProducts {
        products {
          slug
        }
      }
    `
  })

  const paths = data.data.products.map(product => { 
    return {
      params: { 
        productSlug: product.slug
      } 
    }
  })

  return {
    paths,
    fallback: false
  }
}
